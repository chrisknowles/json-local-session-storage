{"version":3,"file":"json-local-session-storage.min.js","sources":["../src/json-local-session-storage.js"],"sourcesContent":["/**\n* Wrapper for local and session storage that stores values as JSON\n*/\n\n/**\n * Get a key/val pair from the store\n *\n * @param {Object} store - The storage object\n * @param {String} key   - The key value\n * @return {mixed}       - The JSON decoded value or boolean \n *                         false if key not exists\n */\nconst getItem = store => key =>\n  store\n    ? JSON.parse(store.getItem(key)) || false\n    : false\n\n/**\n * Set a key/val pair in the store\n *\n * @param {Object} store - The storage object\n * @param {String} key   - The key value\n * @param {mixed} value  - The value to store\n */\nconst setItem = store => (key, value) => {\n  store.setItem(key, JSON.stringify(value))\n}\n\n/**\n * Removes a key/value from the store\n *\n * @param {Object} store - The storage object\n * @param {String} key   - The key value\n */\nconst removeItem = store => key => {\n  store.removeItem(key)\n}\n\n/**\n * Removes all key/values from the store\n *\n * @param {Object} store - The storage object\n */\nconst clear = store => () => {\n  store.clear()\n}\n\n/**\n * Retrieves the number of keys in the store\n *\n * @param {Object} store - The storage object\n * @return {integer}     - The number of keys\n */\nconst length = store => () =>\n  store.length\n\n/**\n * Retrieves the name of the key at poisition i\n *\n * @param {Object} store - The storage object\n * @return {integer}     - The number of keys\n */\nconst key = store => i =>\n  store.key(i)\n\n/**\n * Creates the storage wrapper\n *\n * @param {String} type - The name of the storage object to use\n * @return {Object}     - The api for the storage\n */\nfunction storage(type) {\n  const store = this ? this[type] : global[type]\n  return {\n      getItem: getItem(store)\n    , setItem: setItem(store)\n    , removeItem: removeItem(store)\n    , clear: clear(store)\n    , length: length(store)\n    , key: key(store)\n  }\n}\n\nconst session = storage('sessionStorage')\nconst local = storage('localStorage')\n\nexport {session, local}\nexport default {session, local}\n"],"names":["getItem","store","JSON","parse","key","setItem","value","stringify","removeItem","clear","length","i","storage","type","global","session","local"],"mappings":"sMAYA,IAAMA,EAAU,SAAVA,CAAU,WAAS,mBACvBC,EACIC,KAAKC,KAAL,CAAWF,EAAMD,OAAN,CAAcI,CAAd,CAAX,GAAkC,EADtC,CAEI,GAHU,CAAhB,CAYMC,EAAU,SAAVA,CAAU,WAAS,SAACD,CAAD,CAAME,CAAN,CAAgB,GACjCD,OAAN,CAAcD,CAAd,CAAmBF,KAAKK,SAAL,CAAeD,CAAf,CAAnB,EADc,CAAhB,CAUME,EAAa,SAAbA,CAAa,WAAS,WAAO,GAC3BA,UAAN,CAAiBJ,CAAjB,EADiB,CAAnB,CASMK,EAAQ,SAARA,CAAQ,WAAS,UAAM,GACrBA,KAAN,GADY,CAAd,CAUMC,EAAS,SAATA,CAAS,WAAS,kBACtBT,EAAMS,MADgB,CAAT,CAAf,CASMN,EAAM,SAANA,CAAM,WAAS,mBACnBH,EAAMG,GAAN,CAAUO,CAAV,CADmB,CAAT,CAAZ,CASA,SAASC,CAAT,CAAiBC,CAAjB,CAAuB,KACfZ,EAAQ,KAAO,KAAKY,CAAL,CAAP,CAAoBC,OAAOD,CAAP,CAAlC,OACO,SACMb,EAAQC,CAAR,CADN,SAEMI,EAAQJ,CAAR,CAFN,YAGSO,EAAWP,CAAX,CAHT,OAIIQ,EAAMR,CAAN,CAJJ,QAKKS,EAAOT,CAAP,CALL,KAMEG,EAAIH,CAAJ,EANT,CAUF,IAAMc,EAAUH,EAAQ,gBAAR,CAAhB,CACMI,EAAQJ,EAAQ,cAAR,CAAd,GAGe,CAACG,SAAD,CAAUC,QAAzB"}